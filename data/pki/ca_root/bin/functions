#!/bin/bash

# 域名。
CONF_DOMAIN=ppno.net
PATH_CONFIG=${PATH_ROOT}/conf/ca.${CONF_DOMAIN}.conf

# 根证书的有效期开始时间。
CONF_STARTDATE_ROOT=151029151029Z
# 根证书的有效期结束时间。
CONF_ENDDATE_ROOT=331029151029Z
# 证书的有效期开始时间。
CONF_STARTDATE=181029151029Z
# 证书的有效期结束时间。
CONF_ENDDATE=211029151029Z
# 测试证书的有效期开始时间。
CONF_STARTDATE_TEST=`${SHELL_DATE} -d last-day +%y%m%d151029Z`
# 测试证书的有效期结束时间
CONF_ENDDATE_TEST=`${SHELL_DATE} -d next-month +%y%m%d151029Z`
CONF_SERIAL=E3E3E3

CONF_KEY_CA=ca.${CONF_DOMAIN}.key
CONF_CSR_CA=ca.${CONF_DOMAIN}.csr
CONF_CRT_CA=ca.${CONF_DOMAIN}.crt
CONF_SER_CA=${CONF_SERIAL}0100E3

CONF_KEY_CA_TEST=ca.test.${CONF_DOMAIN}.key
CONF_CSR_CA_TEST=ca.test.${CONF_DOMAIN}.csr
CONF_CRT_CA_TEST=ca.test.${CONF_DOMAIN}.crt
CONF_SER_CA_TEST=${CONF_SERIAL}020401

CONF_KEY_CA_INTERNET=ca.internet.${CONF_DOMAIN}.key
CONF_CSR_CA_INTERNET=ca.internet.${CONF_DOMAIN}.csr
CONF_CRT_CA_INTERNET=ca.internet.${CONF_DOMAIN}.crt
CONF_SER_CA_INTERNET=${CONF_SERIAL}020201

CONF_KEY_CA_INTERNET_SERVICE=ca.service.internet.${CONF_DOMAIN}.key
CONF_CSR_CA_INTERNET_SERVICE=ca.service.internet.${CONF_DOMAIN}.csr
CONF_CRT_CA_INTERNET_SERVICE=ca.service.internet.${CONF_DOMAIN}.crt
CONF_SER_CA_INTERNET_SERVICE=${CONF_SERIAL}02020101

CONF_KEY_CA_INTERNET_PERSONAL=ca.personal.internet.${CONF_DOMAIN}.key
CONF_CSR_CA_INTERNET_PERSONAL=ca.personal.internet.${CONF_DOMAIN}.csr
CONF_CRT_CA_INTERNET_PERSONAL=ca.personal.internet.${CONF_DOMAIN}.crt
CONF_SER_CA_INTERNET_PERSONAL=${CONF_SERIAL}02020102

CONF_KEY_CA_VPN=ca.vpn.${CONF_DOMAIN}.key
CONF_CSR_CA_VPN=ca.vpn.${CONF_DOMAIN}.csr
CONF_CRT_CA_VPN=ca.vpn.${CONF_DOMAIN}.crt
CONF_SER_CA_VPN=${CONF_SERIAL}020101

CONF_KEY_CA_VPN_OPENVPN=ca.openvpn.vpn.${CONF_DOMAIN}.key
CONF_CSR_CA_VPN_OPENVPN=ca.openvpn.vpn.${CONF_DOMAIN}.csr
CONF_CRT_CA_VPN_OPENVPN=ca.openvpn.vpn.${CONF_DOMAIN}.crt
CONF_SER_CA_VPN_OPENVPN=${CONF_SERIAL}03010101

# 是否调试阶段。
# 调试阶段同序列号证书签发时，会先删除原证书。
CONF_DEBUG=1

# 解压密钥，解压后的密钥放在 private 文件夹。
# 参数1：密钥的名称，不包含扩展名 .zip。
function unzip_key() {
    KEY=$1
    ZIP_FILE=private/${KEY}.zip

    if [ -f ${ZIP_FILE} ]; then
        # 解压文件。
        ${SHELL_UNZIP} ${ZIP_FILE}
        # 移动文件到 private 目录。
        ${SHELL_MV} ${KEY} private/
    else
        echo_red "文件 ${ZIP_FILE} 不存在。"
        exit
    fi
}

# 删除数据库中的指定的序列号；仅当 CONF_DEBUG 设置为 1 是有效。
# 参数1：序列号。
function del_exists_serial() {
    if [[ ${CONF_DEBUG} == 1 ]]; then
        # 删除数据库中的当前使用的序列号，将结果放到临时文件。
        # 匹配序列号时，前后需要包含空格。
        ${SHELL_CAT} index.txt | ${SHELL_GREP} -v $1 > index.tmp
        # 删除数据库文件。
        ${SHELL_RM} -rf index.txt
        # 临时文件改名为正式文件。
        ${SHELL_MV} index.tmp index.txt
    fi
}

########## ########## ########## ########## ##########
# 生成密钥。并将密钥加密压缩后存储到 private 目录。
# 参数1：密钥名称。
# 参数2：密钥长度。
# 参数3：密钥的密码。
# 参数4：密钥压缩包的密码。
function genkey() {
    KEY_NAME=$1
    KEY_SIZE=$2
    KEY_PASS=$3
    ZIP_PASS=$4

    if [ -f private/${KEY_NAME}.key.zip ]; then
        echo_yellow "密钥 ${KEY_NAME}.key 已经存在。"
    else
        ${SHELL_OPENSSL} genrsa -des3 -passout pass:${KEY_PASS} -out ${KEY_NAME}.key ${KEY_SIZE}
        ${SHELL_ZIP} -P ${ZIP_PASS} -9 ${KEY_NAME}.key.zip ${KEY_NAME}.key
    
        ${SHELL_MV} ${KEY_NAME}.key.zip private/
        ${SHELL_RM} -rf ${KEY_NAME}.key

        if [ -f private/${KEY_NAME}.key.zip ]; then
            echo_blue "密钥生成成功。"
            ${SHELL_CHMOD} 644 private/${KEY_NAME}.key.zip
            ${SHELL_LS} -aihl --color=tty --time-style=long-iso private/${KEY_NAME}.key.zip
            echo_yellow "强烈建议使用 history -c 清理命令历史记录，避免密钥相关密码外泄。"
        else
            echo_yellow "密钥生成失败。"
        fi
    fi

    # 清理当前命令的历史记录。
    history -c
}

########## ########## ########## ########## ##########
# 生成证书请求文件。
# 参数1：私钥文件。
# 参数2：请求文件。
# 参数3：序列号。
# 参数4：扩展配置项名称。
# 参数5：SUBJ_OU_0 环境变量。
# 参数6：SUBJ_OU_1 环境变量。
# 参数7：SUBJ_CN 环境变量。
function req_common() {
    FILE_KEY=$1
    FILE_CSR=$2

    CONF_SER=$3
    CONF_EXT=$4

    rm_file private/${FILE_KEY}
    rm_file certs/${FILE_CSR}

    unzip_key ${FILE_KEY}

    if [ ! -f private/${FILE_KEY} ]; then
        echo_yellow "解压密钥失败。"
        exit
    fi
    
    export SUBJ_OU_0=$5
    export SUBJ_OU_1=$6
    export SUBJ_CN=$7

    echo_blue "请求开始。"
    ${SHELL_OPENSSL} req                                        \
                    -new                                        \
                    -config ${PATH_CONFIG}                      \
                    -extensions ${CONF_EXT}                     \
                    -set_serial 0x${CONF_SER}                   \
                    -key private/${FILE_KEY}                    \
                    -out certs/${FILE_CSR}
   
    unset SUBJ_OU_0
    unset SUBJ_OU_1
    unset SUBJ_CN

    ${SHELL_RM} -rf private/${FILE_KEY}

    if [ -f certs/${FILE_CSR} ]; then
        echo_blue "请求完成："
        ${SHELL_OPENSSL} req                                    \
                    -noout                                      \
                    -text                                       \
                    -in certs/${FILE_CSR}
    else
        echo_yellow "生成请求文件失败。"
    fi
}

########## ########## ########## ########## ##########
# 证书签名。
# 参数1：签名机构私钥文件。
# 参数2：签名机构证书。
# 参数3：请求文件。
# 参数4：证书。
# 参数5：序列号。
# 参数6：扩展配置项名称。
function sign_ca_common () {
    FILE_KEY_CA=$1
    FILE_CRT_CA=$2
    FILE_CSR=$3
    FILE_CRT=$4
    
    CONF_SER=$5
    CONF_EXT=$6

    D_START=${CONF_STARTDATE}
    D_END=${CONF_ENDDATE}

    if [ $# -ge 8 ]; then
        D_START=$7
        D_END=$8
    fi

    rm_file private/${FILE_KEY_CA}

    unzip_key ${FILE_KEY_CA}

    if [ ! -f private/${FILE_KEY_CA} ]; then
        echo_yellow "解压密钥失败。"
        exit
    fi

    # 设置当前使用的序列号。
    ${SHELL_ECHO} ${CONF_SER} > serial

    # 删除数据库中的当前使用的序列号。
    del_exists_serial ${CONF_SER}

    ${SHELL_OPENSSL} ca                                         \
                    -config ${PATH_CONFIG}                      \
                    -extensions ${CONF_EXT}                     \
                    -startdate ${D_START}                       \
                    -enddate ${D_END}                           \
                    -keyfile private/${FILE_KEY_CA}             \
                    -cert certs/${FILE_CRT_CA}                  \
                    -in certs/${FILE_CSR}                       \
                    -out certs/${FILE_CRT}

    ${SHELL_RM} -rf private/${FILE_KEY_CA}

    if [ -f certs/${FILE_CRT} ]; then
        echo_blue "签名完成。"
    else
        echo_yellow "签名失败。"
    fi
}
