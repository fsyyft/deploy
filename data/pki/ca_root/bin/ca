#!/bin/bash

# 脚本所在目录。
# 这里要注意下，如果写 /usr/bin/cd 会有问题。
PATH_SHELL_FOLDER=$(cd `dirname $0`;pwd)

PATH_ROOT=${PATH_SHELL_FOLDER}/..
cd ${PATH_ROOT}

. ${PATH_ROOT}/../../shell/functions
. ${PATH_ROOT}/bin/functions
echo_blue "进入工作目录：$(${SHELL_PWD})"

PATH_CONFIG=${PATH_ROOT}/conf/ca.${CONF_DOMAIN}.conf

########## ########## ########## ########## ##########
# 生成根证书请求文件。
function req_ca () {
    req_common  ${CONF_KEY_CA}                         \
                ${CONF_CSR_CA}                         \
                ${CONF_SER_CA}                         \
                "v3_ca_root"                           \
                "GlobalDevSign Root CA"                \
                "ca.${CONF_DOMAIN}"                    \
                "GlobalDevSign Root CA"
}

########## ########## ########## ########## ##########
# 自签名根证书。
function selfsign_ca () {
    CONF_EXTENSIONS=v3_ca_root

    # 删除私钥。
    rm_file private/${CONF_KEY_CA}

    unzip_key ${CONF_KEY_CA}

    if [ ! -f private/${CONF_KEY_CA} ]; then
        echo_yellow "解压密钥失败。"
        exit
    fi

    # 设置当前使用的序列号。
    ${SHELL_ECHO} ${CONF_SER_CA} > serial

    # 删除数据库中的当前使用的序列号。
    del_exists_serial ${CONF_SER_CA}

    ${SHELL_OPENSSL} ca                                         \
                    -selfsign                                   \
                    -config ${PATH_CONFIG}                      \
                    -extensions ${CONF_EXTENSIONS}              \
                    -startdate ${CONF_STARTDATE_ROOT}           \
                    -enddate ${CONF_ENDDATE_ROOT}               \
                    -keyfile private/${CONF_KEY_CA}             \
                    -in certs/${CONF_CSR_CA}                    \
                    -out certs/${CONF_CRT_CA}

    ${SHELL_RM} -rf private/${CONF_KEY_CA}

    if [ -f certs/${CONF_CRT_CA} ]; then
        echo_blue "签名完成。"
    else
        echo_yellow "签名失败。"
    fi
}

########## ########## ########## ########## ##########
# 生成 Internet 颁发机构证书请求文件。
function req_ca_internet () {
    req_common  ${CONF_KEY_CA_INTERNET}                         \
                ${CONF_CSR_CA_INTERNET}                         \
                ${CONF_SER_CA_INTERNET}                         \
                "v3_ca_internet"                                \
                "GlobalDevSign Internet Authority"              \
                "ca.internet.${CONF_DOMAIN}"                    \
                "GlobalDevSign Internet Authority"
}

########## ########## ########## ########## ##########
# 签名 Internet 颁发机构证书。
function sign_ca_internet () {
    sign_ca_common  ${CONF_KEY_CA}                              \
                    ${CONF_CRT_CA}                              \
                    ${CONF_CSR_CA_INTERNET}                     \
                    ${CONF_CRT_CA_INTERNET}                     \
                    ${CONF_SER_CA_INTERNET}                     \
                    "v3_ca_internet"
}

########## ########## ########## ########## ##########
# 生成 Internet Service  颁发机构证书请求文件。
function req_ca_internet_service () {
    req_common  ${CONF_KEY_CA_INTERNET_SERVICE}                 \
                ${CONF_CSR_CA_INTERNET_SERVICE}                 \
                ${CONF_SER_CA_INTERNET_SERVICE}                 \
                "v3_ca_internet_service"                        \
                "GlobalDevSign Internet Service Authority"      \
                "ca.service.internet.${CONF_DOMAIN}"            \
                "GlobalDevSign Internet Service Authority"
}

########## ########## ########## ########## ##########
# 签名 Internet Internet 颁发机构证书。
function sign_ca_internet_service () {
    sign_ca_common  ${CONF_KEY_CA_INTERNET}                     \
                    ${CONF_CRT_CA_INTERNET}                     \
                    ${CONF_CSR_CA_INTERNET_SERVICE}             \
                    ${CONF_CRT_CA_INTERNET_SERVICE}             \
                    ${CONF_SER_CA_INTERNET_SERVICE}             \
                    "v3_ca_internet_service"
}

########## ########## ########## ########## ##########
# 生成 Internet Personal  颁发机构证书请求文件。
function req_ca_internet_personal () {
    req_common  ${CONF_KEY_CA_INTERNET_PERSONAL}                \
                ${CONF_CSR_CA_INTERNET_PERSONAL}                \
                ${CONF_SER_CA_INTERNET_PERSONAL}                \
                "v3_ca_internet_personal"                       \
                "GlobalDevSign Internet Personal Authority"     \
                "ca.personal.internet.${CONF_DOMAIN}"           \
                "GlobalDevSign Internet Personal Authority"
}

########## ########## ########## ########## ##########
# 签名 Internet Personal 颁发机构证书。
function sign_ca_internet_personal () {
    sign_ca_common  ${CONF_KEY_CA_INTERNET}                     \
                    ${CONF_CRT_CA_INTERNET}                     \
                    ${CONF_CSR_CA_INTERNET_PERSONAL}            \
                    ${CONF_CRT_CA_INTERNET_PERSONAL}            \
                    ${CONF_SER_CA_INTERNET_PERSONAL}            \
                    "v3_ca_internet_personal"
}


########## ########## ########## ########## ##########
# 生成 VPN 颁发机构证书请求文件。
function req_ca_vpn () {
    req_common  ${CONF_KEY_CA_VPN}                              \
                ${CONF_CSR_CA_VPN}                              \
                ${CONF_SER_CA_VPN}                              \
                "v3_ca_vpn"                                     \
                "GlobalDevSign VPN Authority"                   \
                "ca.vpn.${CONF_DOMAIN}"                         \
                "GlobalDevSign VPN Authority"
}

########## ########## ########## ########## ##########
# 签名 VPN 颁发机构证书。
function sign_ca_vpn () {
    sign_ca_common  ${CONF_KEY_CA}                              \
                    ${CONF_CRT_CA}                              \
                    ${CONF_CSR_CA_VPN}                          \
                    ${CONF_CRT_CA_VPN}                          \
                    ${CONF_SER_CA_VPN}                          \
                    "v3_ca_vpn"
}

########## ########## ########## ########## ##########
# 生成 OpenVPN 颁发机构证书请求文件。
function req_ca_vpn_openvpn () {
    req_common  ${CONF_KEY_CA_VPN_OPENVPN}                      \
                ${CONF_CSR_CA_VPN_OPENVPN}                      \
                ${CONF_SER_CA_VPN_OPENVPN}                      \
                "v3_ca_vpn_openvpn"                             \
                "GlobalDevSign OpenVPN Authority"               \
                "ca.openvpn.vpn.${CONF_DOMAIN}"                 \
                "GlobalDevSign OpenVPN Authority"
}

########## ########## ########## ########## ##########
# 签名 OpenVPN 颁发机构证书。
function sign_ca_vpn_openvpn () {
    sign_ca_common  ${CONF_KEY_CA_VPN}                          \
                    ${CONF_CRT_CA_VPN}                          \
                    ${CONF_CSR_CA_VPN_OPENVPN}                  \
                    ${CONF_CRT_CA_VPN_OPENVPN}                  \
                    ${CONF_SER_CA_VPN_OPENVPN}                  \
                    "v3_ca_vpn_openvpn"
}


########## ########## ########## ########## ##########
# 生成测试颁发机构证书请求文件。
function req_ca_test () {
    req_common  ${CONF_KEY_CA_TEST}                             \
                ${CONF_CSR_CA_TEST}                             \
                ${CONF_SER_CA_TEST}                             \
                "v3_ca_test"                                    \
                "GlobalDevSign Test CA"                         \
                "ca.test.${CONF_DOMAIN}"                        \
                "GlobalDevSign Test CA"
}

########## ########## ########## ########## ##########
# 签名测试颁发机构证书。
function sign_ca_test () {
    sign_ca_common  ${CONF_KEY_CA}                              \
                    ${CONF_CRT_CA}                              \
                    ${CONF_CSR_CA_TEST}                         \
                    ${CONF_CRT_CA_TEST}                         \
                    ${CONF_SER_CA_TEST}                         \
                    "v3_ca_test"                                \
                    ${CONF_STARTDATE_TEST}                      \
                    ${CONF_ENDDATE_TEST}
}
function req_vpn_openvpn_server () {
    SERVER_NAME=$1
    SERVER_ID=$2
    SERVER_IP=$3

    SERVER_DOMAIN_BASE=server.openvpn.${CONF_DOMAIN}
    SERVER_DOMAIN=${SERVER_NAME}.${SERVER_DOMAIN_BASE}

    # 服务端如果没有定义专用密钥对，可以只用一个密钥对。
    FILE_KEY=${SERVER_DOMAIN_BASE}.key

    if [ -f private/${SERVER_DOMAIN}.key.zip ]; then
        FILE_KEY=${SERVER_DOMAIN}.key
    fi    

    FILE_CSR=${SERVER_DOMAIN}.csr
    CONF_EXTENSIONS=v3_vpn_openvpn_server
    CONF_SERIAL=E3E3E30401010100${SERVER_ID}

    rm_file private/${FILE_KEY}
    rm_file certs/${FILE_CSR}

    unzip_key ${FILE_KEY}
    
    export SUBJ_OU_0="GlobalDevSign OpenVPN Server Authority"
    export SUBJ_OU_1=${SERVER_DOMAIN}
    export SUBJ_CN=${SERVER_DOMAIN}
    export SUBJ_OPENVPN_SERVER_NAME=${SERVER_NAME}
    export SUBJ_OPENVPN_IP=${SERVER_IP}

    echo_blue 请求开始。
    ${SHELL_OPENSSL} req                                \
                    -new                                \
                    -config ${PATH_CONFIG}              \
                    -extensions ${CONF_EXTENSIONS}      \
                    -set_serial 0x${CONF_SERIAL}        \
                    -key private/${FILE_KEY}            \
                    -out certs/openvpn/${FILE_CSR}
   
    unset SUBJ_OU_0
    unset SUBJ_OU_1
    unset SUBJ_CN
    unset SUBJ_OPENVPN_SERVER_NAME
    unset SUBJ_OPENVPN_IP

    ${SHELL_RM} -rf private/${FILE_KEY}

    echo_blue 请求完成：

    ${SHELL_OPENSSL} req                                \
                    -noout                              \
                    -text                               \
                    -in certs/openvpn/${FILE_CSR}
}

function sign_vpn_openvpn_server () {
    SERVER_NAME=$1
    SERVER_ID=$2
    SERVER_IP=$3

    SERVER_DOMAIN_BASE=server.openvpn.${CONF_DOMAIN}
    SERVER_DOMAIN=${SERVER_NAME}.${SERVER_DOMAIN_BASE}

    FILE_KEY_CA=ca.openvpn.vpn.${CONF_DOMAIN}.key
    FILE_CRT_CA=ca.openvpn.vpn.${CONF_DOMAIN}.crt
    FILE_CSR=${SERVER_DOMAIN}.csr
    FILE_CRT=${SERVER_DOMAIN}.crt
    CONF_EXTENSIONS=v3_vpn_openvpn_server
    CONF_SERIAL=E3E3E30401010100${SERVER_ID}

    rm_file private/${FILE_KEY_CA}

    unzip_key ${FILE_KEY_CA}

    # 设置当前使用的序列号。
    ${SHELL_ECHO} ${CONF_SERIAL} > serial

    # 删除数据库中的当前使用的序列号。
    del_exists_serial ${CONF_SERIAL}

    export SUBJ_OU_0="GlobalDevSign OpenVPN Server Authority"
    export SUBJ_OU_1=${SERVER_DOMAIN}
    export SUBJ_CN=${SERVER_DOMAIN}
    export SUBJ_OPENVPN_SERVER_NAME=${SERVER_NAME}
    export SUBJ_OPENVPN_IP=${SERVER_IP}

    ${SHELL_OPENSSL} ca                                 \
                    -config ${PATH_CONFIG}              \
                    -extensions ${CONF_EXTENSIONS}      \
                    -startdate ${CONF_STARTDATE}        \
                    -enddate ${CONF_ENDDATE}            \
                    -keyfile private/${FILE_KEY_CA}     \
                    -cert certs/${FILE_CRT_CA}          \
                    -in certs/openvpn/${FILE_CSR}       \
                    -out certs/openvpn/${FILE_CRT}

    
    unset SUBJ_OU_0
    unset SUBJ_OU_1
    unset SUBJ_CN
    unset SUBJ_OPENVPN_SERVER_NAME
    unset SUBJ_OPENVPN_IP

    ${SHELL_RM} -rf private/${FILE_KEY_CA}

    echo_blue 签名完成。
}

########## ########## ########## ########## ##########
# 生成 OpenVPN 客户端证书请求文件。
function req_vpn_openvpn_client () {
    CLIENT_NAME=$1
    CLIENT_ID=$2
    CLIENT_IP=$3

    CLIENT_DOMAIN_BASE=openvpn.${CONF_DOMAIN}
    CLIENT_DOMAIN=${CLIENT_NAME}.${CLIENT_DOMAIN_BASE}

    FILE_KEY=${CLIENT_DOMAIN}.key
    FILE_CSR=${CLIENT_DOMAIN}.csr
    CONF_EXTENSIONS=v3_vpn_openvpn_client
    CONF_SERIAL=E3E3E30401010101${CLIENT_ID}

    rm_file private/${FILE_KEY}
    rm_file certs/${FILE_CSR}

    unzip_key ${FILE_KEY}
    
    export SUBJ_OU_0="GlobalDevSign OpenVPN Client Authority"
    export SUBJ_OU_1=${CLIENT_DOMAIN}
    export SUBJ_CN=${CLIENT_DOMAIN}
    export SUBJ_OPENVPN_CLIENT_NAME=${CLIENT_NAME}
    export SUBJ_OPENVPN_IP=${CLIENT_IP}

    echo_blue 请求开始。
    ${SHELL_OPENSSL} req                                \
                    -new                                \
                    -config ${PATH_CONFIG}              \
                    -extensions ${CONF_EXTENSIONS}      \
                    -set_serial 0x${CONF_SERIAL}        \
                    -key private/${FILE_KEY}            \
                    -out certs/openvpn/${FILE_CSR}
   
    unset SUBJ_OU_0
    unset SUBJ_OU_1
    unset SUBJ_CN
    unset SUBJ_OPENVPN_CLIENT_NAME
    unset SUBJ_OPRNVPN_IP

    ${SHELL_RM} -rf private/${FILE_KEY}

    echo_blue 请求完成：

    ${SHELL_OPENSSL} req                                \
                    -noout                              \
                    -text                               \
                    -in certs/openvpn/${FILE_CSR}
}

########## ########## ########## ########## ##########
# 签名 OpenVPN 客户端证书。
function sign_vpn_openvpn_client () {
    CLIENT_NAME=$1
    CLIENT_ID=$2
    CLIENT_IP=$3

    CLIENT_DOMAIN_BASE=openvpn.${CONF_DOMAIN}
    CLIENT_DOMAIN=${CLIENT_NAME}.${CLIENT_DOMAIN_BASE}

    FILE_KEY_CA=ca.openvpn.vpn.${CONF_DOMAIN}.key
    FILE_CRT_CA=ca.openvpn.vpn.${CONF_DOMAIN}.crt
    FILE_CSR=${CLIENT_DOMAIN}.csr
    FILE_CRT=${CLIENT_DOMAIN}.crt
    CONF_EXTENSIONS=v3_vpn_openvpn_client
    CONF_SERIAL=E3E3E30401010101${CLIENT_ID}

    rm_file private/${FILE_KEY_CA}

    unzip_key ${FILE_KEY_CA}

    # 设置当前使用的序列号。
    ${SHELL_ECHO} ${CONF_SERIAL} > serial

    # 删除数据库中的当前使用的序列号。
    del_exists_serial ${CONF_SERIAL}

    export SUBJ_OU_0="GlobalDevSign OpenVPN Client Authority"
    export SUBJ_OU_1=${CLIENT_DOMAIN}
    export SUBJ_CN=${CLIENT_DOMAIN}
    export SUBJ_OPENVPN_CLIENT_NAME=${CLIENT_NAME}
    export SUBJ_OPENVPN_IP=${CLIENT_IP}

    ${SHELL_OPENSSL} ca                                 \
                    -config ${PATH_CONFIG}              \
                    -extensions ${CONF_EXTENSIONS}      \
                    -startdate ${CONF_STARTDATE}        \
                    -enddate ${CONF_ENDDATE}            \
                    -keyfile private/${FILE_KEY_CA}     \
                    -cert certs/${FILE_CRT_CA}          \
                    -in certs/openvpn/${FILE_CSR}       \
                    -out certs/openvpn/${FILE_CRT}

    
    unset SUBJ_OU_0
    unset SUBJ_OU_1
    unset SUBJ_CN
    unset SUBJ_OPENVPN_CLIENT_NAME
    unset SUBJ_OPRNVPN_IP

    ${SHELL_RM} -rf private/${FILE_KEY_CA}

    echo_blue 签名完成。
}

case $1 in
    "req_ca") req_ca ;;
    "selfsign_ca") selfsign_ca ;;
    "req_ca_vpn") req_ca_vpn ;;
    "sign_ca_vpn") sign_ca_vpn;;
    "req_ca_internet") req_ca_internet;;
    "sign_ca_internet") sign_ca_internet;;
    "req_ca_internet_service") req_ca_internet_service;;
    "sign_ca_internet_service") sign_ca_internet_service;;
    "req_ca_internet_personal") req_ca_internet_personal;;
    "sign_ca_internet_personal") sign_ca_internet_personal;;
    "req_ca_vpn_openvpn") req_ca_vpn_openvpn;;
    "sign_ca_vpn_openvpn") sign_ca_vpn_openvpn;;
    "req_ca_test") req_ca_test;;
    "sign_ca_test") sign_ca_test;;
    "req_vpn_openvpn_server") req_vpn_openvpn_server $2 $3 $4;;
    "sign_vpn_openvpn_server") sign_vpn_openvpn_server $2 $3 $4;;
    "req_vpn_openvpn_client") req_vpn_openvpn_client $2 $3 $4;;
    "sign_vpn_openvpn_client") sign_vpn_openvpn_client $2 $3 $4;;
    "genkey") genkey  $2 $3 $4 $4;;
esac
